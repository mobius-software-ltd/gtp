package com.mobius.software.telco.protocols.gtp.api.headers;
/*Mobius Software LTD
Copyright 2019, Mobius Software LTD and individual contributors
by the @authors tag.

This program is free software: you can redistribute it and/or modify
under the terms of the GNU Affero General Public License as
published by the Free Software Foundation; either version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>*/
import java.util.HashMap;
import java.util.Map;

public enum ElementType 
{
	UNKNOWN(0),CAUSE(1),IMSI(2),RAI(3),TLLI(4),PTMSI(5),REORDERING_REQUIRED(8),AUTHENTICATION_TRIPLET(9),
	MAP_CAUSE(11),PTMSI_SIGNATURE(12),MS_VALIDATED(13),RECOVERY(14),SELECTION_MODE(15),TEID_1(16),TEICP(17),TEID_2(18),
	TEARDOWN_IND(19),NSAPI(20),RANAP_CAUSE(21),RAB_CONTEXT(22),RADIO_PRIORITY_SMS(23),RADIO_PRIORITY(24),PACKET_FLOW_ID(25),CHARGING_CHARACTERISTICS(26),
	TRACE_REFERENCE(27),TRACE_TYPE(28),MS_NOT_REACHABLE_REASON(29),PACKET_TRANSFER_COMMAND(126),CHARGING_ID(127),END_USER_ADDRESS(128),MM_CONTEXT(129),
	PDP_CONTEXT(130),APN(131),PROTOCOL_CONFIGURATION_OPTIONS(132),GSN_ADDRESS(133),MSISDN(134),QOS_PROFILE(135),AUTHENTICATION_QUINTIPLET(136),TRAFFIC_FLOW_TEMPLATE(137),TARGET_IDENTIFICATION(138),
	UTRAN_TRANSPARENT_CONTAINER(139),RAB_SETUP_INFORMATION(140),EXTENTION_HEADER_TYPE_LIST(141),TRIGGER_ID(142),OMC_IDENTITY(143),RAN_TRANSPARENT_CONTAINER(144),
	PDP_CONTEXT_PRIORITIZATION(145),ADDITIONAL_RAB_SETUP_INFORMATION(146),SGSN_NUMBER(147),COMMON_FLAGS(148),APN_RESTRICTION(149),RADIO_PRIORITY_LCS(150),
	RAT_TYPE(151),USER_LOCATION_INFORMATION(152),MS_TIMEZONE(153),IMEI_SV(154),CAMEL_CHARGING_INFORMATION_CONTAINER(155),
	MBMS_UE_CONTEXT(156),TMGI(157),RIM_ROUTING_ADDRESS(158),MBMS_PROTOCOL_CONFIGURATION_OPTION(159),MBMS_SERVICE_AREA(160),
	SOURCE_RNC_PDCP_CONTEXT_INFO(161),ADDITIONAL_TRACE_INFO(162),HOP_COUNTER(163),SELECTED_PLMN_ID(164),MBMS_SESSION_IDENTIFIER(165),
	MBMS_2G_3G_INDICATOR(166),ENHANCED_NSAPI(167),MBMS_SESSION_DURATION(168),ADDITIONAL_MBMS_TRACE_INFO(169),MBMS_SESSION_REPETITION_NUMBER(170),
	MBMS_TIME_TO_DATA_TRANSFER(171),BSS_CONTAINER(173),CELL_IDENTIFICATION(174),PDU_NUMBERS(175),BSSGP_CAUSE(176),REQUIRED_MBMS_BEARER_CAPABILITIES(177),
	RIM_ROUTING_ADDRESS_DISCRIMITATOR(178),LIST_OF_SETUP_PFCs(179),PS_HANDOVER_XID_PARAMETERS(180),MS_INFO_CHANGE_REPORTING_ACTION(181),DIRECT_TUNNEL_FLAGS(182),
	CORRELATION_ID(183),BEARER_CONTROL_MODE(184),MBMS_FLOW_IDENTIFIER(185),MBMS_IP_MULTICAST_DISTRIBUTION(186),MBMS_DISTRIBUTION_ACKNOWLEDGMENT(187),
	RELIABLE_INTER_RAT_HANDOVER_INFO(188),RFSP_INDEX(189),FQDN(190),EVOLVED_ALLOCATION_RETENTION_PRIORITY_1(191),EVOLVED_ALLOCATION_RETENTION_PRIORITY_2(192),
	EXTENDED_COMMON_FLAGS(193),USER_CSG_INFORMATION(194),CSG_INFORMATION_REPORTING_ACTION(195),CSG_ID(196),CSG_MEMBERSHIP_INDICATION(197),APN_AMBR(198),
	UE_NETWORK_CAPABILITY(199),UE_AMBR(200),APN_AMBR_WITH_NSAPI(201),GGSN_BACK_OFF_TIME(202),SIGNALING_PRIORITY_INDICATION(203),SIGNALING_PRIORITY_INDICATION_WITH_NSAPI(204),
	HIGHER_BITRATES_THEN_16_MBPS_FLAG(205),ADDITIONAL_MM_CONTEXT_FOR_SRVCC(207),ADDITIONAL_FLAGS_FOR_SRVCC(208),STN_SR(209),C_MSISDN(210),EXTENDED_RANAP_CAUSE(211),
	ENODEB_ID(212),SELECTION_MODE_WITH_NSAPI(213),ULI_TIMESTAMP(214),LOCAL_HOME_NETWORK_ID_WITH_NSAPI(215),CN_OPERATOR_SELECTION_ENTITY(216),
	SEQUENCE_NUMBER_OF_RELEASED_PACKETS(249),SEQUENCE_NUMBER_OF_CANCELLED_PACKETS(250),CHARGING_GATEWAY_ADDRESS(251),DATA_RECORD_PACKET(252),REQUESTS_RESPONDED(253),ADDRESS_OF_RECOMMENDED_NODE(254),
	PRIVATE_EXTENTION(255);
	
	private static final Map<Integer, ElementType> intToTypeMap = new HashMap<Integer, ElementType>();
	static
	{
	    for (ElementType type : ElementType.values()) 
	    {
	        intToTypeMap.put(type.value, type);
	    }
	}

	public static ElementType fromInt(int i) 
	{
		ElementType type = intToTypeMap.get(Integer.valueOf(i));
	    if (type == null) 
	        return ElementType.UNKNOWN;
	    
	    return type;
	}
	
	int value;
	
	private ElementType(int value)
	{
		this.value=value;
	}
	
	public int getValue()
	{
		return value;
	}
}
